import { isValidLineArgs, isNotValidLineArgs } from '../validation.js';
import { collectArgs } from '../utils.js';

import { Point } from '../point.js';

describe('Arguments of new Line() constructor:', () => {
  const p1 = new Point(1, 2),
	    p2 = new Point(2, 3),
	    p3 = new Point(3, 4),
	    p4 = new Point(4, 5);

  test('A single argument of type "[ Point, Point ]" should be valid as constructor arguments for class "Line" (isValidLineArgs should return true and isNotValidLineArgs should return false).', () => {
	expect(collectArgs(isValidLineArgs, [ p1, p2 ])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [ p1, p2 ])).toBe(false);
	expect(collectArgs(isValidLineArgs, [ p1 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ p1 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ p1, p1 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ p1, p1 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ p1, p2, p3, p4 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ p1, p2, p3, p4 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [])).toBe(true);
  });

  test('A single argument of type "[{ x: number | string, y: number | string }, { x: number | string, y: number | string }]" (where string values are able to be coerced to numbers) should be valid as constructor arguments for class "Line" (isValidLineArgs should return true and isNotValidLineArgs should return false).', () => {
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ a: 1, y: 2 }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ a: 1, y: 2 }, { x: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, b: 2 }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, b: 2 }, { x: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { a: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { a: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: 2, b: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: 2, b: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { a: 2, b: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { a: 2, b: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ a: 1, y: 2 }, { a: 2, b: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ a: 1, y: 2 }, { a: 2, b: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, b: 2 }, { a: 2, b: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, b: 2 }, { a: 2, b: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ a: 1, b: 2 }, { a: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ a: 1, b: 2 }, { a: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ a: 1, b: 2 }, { x: 2, b: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: '1', y: 2 }, { x: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [{ x: '1', y: 2 }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isValidLineArgs, [{ x: '1', y: 2 }, { x: '2', y: 3 }])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [{ x: '1', y: 2 }, { x: '2', y: 3 }])).toBe(false);
	expect(collectArgs(isValidLineArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: '2', y: '3' }])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: '2', y: '3' }])).toBe(false);
	expect(collectArgs(isValidLineArgs, [{ x: '1', y: '2' }, { x: '2', y: 3 }])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [{ x: '1', y: '2' }, { x: '2', y: 3 }])).toBe(false);
	expect(collectArgs(isValidLineArgs, [{ x: '1', y: 2 }, { x: '2', y: '3' }])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [{ x: '1', y: 2 }, { x: '2', y: '3' }])).toBe(false);
	expect(collectArgs(isValidLineArgs, [{ x: '1', y: '2' }, { x: 2, y: '3' }])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [{ x: '1', y: '2' }, { x: 2, y: '3' }])).toBe(false);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: '2' }, { x: '2', y: '3' }])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: '2' }, { x: '2', y: '3' }])).toBe(false);
	expect(collectArgs(isValidLineArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }])).toBe(false);
	expect(collectArgs(isValidLineArgs, [{ x: '1', y: '2' }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: '1', y: '2' }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: '1', y: '2' }, { x: '1', y: '2' }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: '1', y: '2' }, { x: '1', y: '2' }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 'test', y: 2 }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 'test', y: 2 }, { x: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 'test', y: 2 }, { x: 'test', y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 'test', y: 2 }, { x: 'test', y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 'test' }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 'test' }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: 'test', y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: 'test', y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: 'test', y: 'test' }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: 'test', y: 'test' }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 'test', y: 2 }, { x: 'test', y: 'test' }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 'test', y: 2 }, { x: 'test', y: 'test' }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 'test' }, { x: 'test', y: 'test' }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 'test' }, { x: 'test', y: 'test' }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: [ 2 ], y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: [ 2 ], y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: 2, y: [ 3 ] }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: 2, y: [ 3 ] }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: [ 1 ], y: 2 }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: [ 1 ], y: 2 }, { x: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: [ 2 ] }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: [ 2 ] }, { x: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: [ 2 ], y: [ 3 ] }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: [ 2 ], y: [ 3 ] }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: [ 2 ] }, { x: [ 2 ], y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: [ 2 ] }, { x: [ 2 ], y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: [ 1 ], y: 2 }, { x: [ 2 ], y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: [ 1 ], y: 2 }, { x: [ 2 ], y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ]}])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: [ 1, 2 ] }, { x: [ 2, 3 ] }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: [ 1, 2 ] }, { x: [ 2, 3 ] }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: 1, y: null }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: 1, y: null }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: null, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: null, y: 2 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: null, y: null }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: null, y: null }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: null, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: null, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: null }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: null }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: null, y: null }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: null, y: null }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: null, y: null }, { x: null, y: null }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: null, y: null }, { x: null, y: null }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: 1, y: null }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: 1, y: undefined }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: undefined, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: undefined, y: 2 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: 2 }, { x: undefined, y: undefined }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: 2 }, { x: undefined, y: undefined }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: undefined, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: undefined, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: 1, y: undefined }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: 1, y: undefined }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: undefined, y: undefined }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: undefined, y: undefined }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }])).toBe(true);
	expect(collectArgs(isValidLineArgs, [{}, {}])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [{}, {}])).toBe(true);
  });

  test('A single argument of type "[[ number | string, number | string ], [ number | string, number | string ]]" (where string values are able to be coerced to numbers) should be valid as constructor arguments for class "Line" (isValidLineArgs should return true and isNotValidLineArgs should return false).', () => {
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ '1', 2 ], [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [[ '1', 2 ], [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isValidLineArgs, [[ '1', 2 ], [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [[ '1', 2 ], [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isValidLineArgs, [[ '1', '2' ], [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [[ '1', '2' ], [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ '2', '3' ]])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ '2', '3' ]])).toBe(false);
	expect(collectArgs(isValidLineArgs, [[ '1', '2' ], [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [[ '1', '2' ], [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isValidLineArgs, [[ '1', 2 ], [ '2', '3' ]])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [[ '1', 2 ], [ '2', '3' ]])).toBe(false);
	expect(collectArgs(isValidLineArgs, [[ '1', '2' ], [ 2, '3' ]])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [[ '1', '2' ], [ 2, '3' ]])).toBe(false);
	expect(collectArgs(isValidLineArgs, [[ 1, '2' ], [ '2', '3' ]])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [[ 1, '2' ], [ '2', '3' ]])).toBe(false);
	expect(collectArgs(isValidLineArgs, [[ '1', '2' ], [ '2', '3' ]])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [[ '1', '2' ], [ '2', '3' ]])).toBe(false);
	expect(collectArgs(isValidLineArgs, [[ '1', '2' ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ '1', '2' ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ '1', '2' ], [ '1', '2' ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ '1', '2' ], [ '1', '2' ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 'test', 2 ], [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 'test', 2 ], [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 'test', 'test' ], [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 'test', 'test' ], [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 'test', 2 ], [ 'test', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 'test', 2 ], [ 'test', 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 'test', 'test' ], [ 'test', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 'test', 'test' ], [ 'test', 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 'test', 'test' ], [ 2, 'test' ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 'test', 'test' ], [ 2, 'test' ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ 'test', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ 'test', 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ 'test', 'test' ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ 'test', 'test' ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 'test', 2 ], [ 'test', 'test' ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 'test', 2 ], [ 'test', 'test' ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 'test' ], [ 'test', 'test' ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 'test' ], [ 'test', 'test' ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 'test', 'test' ], [ 'test', 'test' ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 'test', 'test' ], [ 'test', 'test' ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [[ 2 ], 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [[ 2 ], 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ 2, [ 3 ]]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ 2, [ 3 ]]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[[ 1 ], 2 ], [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[[ 1 ], 2 ], [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, [ 2 ]], [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, [ 2 ]], [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [[ 2 ], [ 3 ]]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [[ 2 ], [ 3 ]]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, [ 2 ]], [[ 2 ], 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, [ 2 ]], [[ 2 ], 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[[ 1 ], 2 ], [[ 2 ], 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[[ 1 ], 2 ], [[ 2 ], 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[[ 1 ], [ 2 ]], [[ 2 ], 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[[ 1 ], [ 2 ]], [[ 2 ], 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[[ 1, 2 ]], [[ 2, 3 ]]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[[ 1, 2 ]], [[ 2, 3 ]]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ 1, null ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ 1, null ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ null, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ null, 2 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ null, null ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ null, null ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ null, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ null, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, null ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, null ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ null, null ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ null, null ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ null, null ], [ null, null ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ null, null ], [ null, null ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ 1, null ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ 1, undefined ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ undefined, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ undefined, 2 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ], [ undefined, undefined ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ], [ undefined, undefined ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ undefined, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ undefined, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, undefined ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, undefined ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ undefined, undefined ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ undefined, undefined ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ undefined, undefined ], [ undefined, undefined ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ undefined, undefined ], [ undefined, undefined ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[], []])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[], []])).toBe(true);
  });

  test('Two arguments of type "Point { x: number | string, y: number | string }" (where string values are able to be coerced to numbers) should be valid as constructor arguments for class "Line" (isValidLineArgs should return true and isNotValidLineArgs should return false).', () => {
	expect(collectArgs(isValidLineArgs, p1, p2)).toBe(true);
	expect(collectArgs(isNotValidLineArgs, p1, p2)).toBe(false);
	expect(collectArgs(isValidLineArgs, p1)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, p1)).toBe(true);
	expect(collectArgs(isValidLineArgs, p1, p1)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, p1, p1)).toBe(true);
	expect(collectArgs(isValidLineArgs, p1, p2, p3, p4)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, p1, p2, p3, p4)).toBe(true);
  });

  test('Two arguments of type "{ x: number | string, y: number | string }" (where string values are able to be coerced to numbers) should be valid as constructor arguments for class "Line" (isValidLineArgs should return true and isNotValidLineArgs should return false).', () => {
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: 2, y: 3 })).toBe(true);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: 2, y: 3 })).toBe(false);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { a: 1, y: 2 }, { x: 2, y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { a: 1, y: 2 }, { x: 2, y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, b: 2 }, { x: 2, y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, b: 2 }, { x: 2, y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { a: 2, y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { a: 2, y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: 2, b: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: 2, b: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { a: 1, b: 2 }, { x: 2, y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { a: 1, b: 2 }, { x: 2, y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { a: 2, b: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { a: 2, b: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { a: 1, y: 2 }, { a: 2, b: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { a: 1, y: 2 }, { a: 2, b: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, b: 2 }, { a: 2, b: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, b: 2 }, { a: 2, b: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { a: 1, b: 2 }, { a: 2, y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { a: 1, b: 2 }, { a: 2, y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { a: 1, b: 2 }, { a: 2, b: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { a: 1, b: 2 }, { x: 2, b: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { a: 1, b: 2 }, { a: 2, b: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { a: 1, b: 2 }, { a: 2, b: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: '1', y: 2 }, { x: 2, y: 3 })).toBe(true);
	expect(collectArgs(isNotValidLineArgs, { x: '1', y: 2 }, { x: 2, y: 3 })).toBe(false);
	expect(collectArgs(isValidLineArgs, { x: '1', y: 2 }, { x: '2', y: 3 })).toBe(true);
	expect(collectArgs(isNotValidLineArgs, { x: '1', y: 2 }, { x: '2', y: 3 })).toBe(false);
	expect(collectArgs(isValidLineArgs, { x: '1', y: '2' }, { x: 2, y: 3 })).toBe(true);
	expect(collectArgs(isNotValidLineArgs, { x: '1', y: '2' }, { x: 2, y: 3 })).toBe(false);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: '2', y: '3' })).toBe(true);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: '2', y: '3' })).toBe(false);
	expect(collectArgs(isValidLineArgs, { x: '1', y: '2' }, { x: '2', y: 3 })).toBe(true);
	expect(collectArgs(isNotValidLineArgs, { x: '1', y: '2' }, { x: '2', y: 3 })).toBe(false);
	expect(collectArgs(isValidLineArgs, { x: '1', y: 2 }, { x: '2', y: '3' })).toBe(true);
	expect(collectArgs(isNotValidLineArgs, { x: '1', y: 2 }, { x: '2', y: '3' })).toBe(false);
	expect(collectArgs(isValidLineArgs, { x: '1', y: '2' }, { x: 2, y: '3' })).toBe(true);
	expect(collectArgs(isNotValidLineArgs, { x: '1', y: '2' }, { x: 2, y: '3' })).toBe(false);
	expect(collectArgs(isValidLineArgs, { x: 1, y: '2' }, { x: '2', y: '3' })).toBe(true);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: '2' }, { x: '2', y: '3' })).toBe(false);
	expect(collectArgs(isValidLineArgs, { x: '1', y: '2' }, { x: '2', y: '3' })).toBe(true);
	expect(collectArgs(isNotValidLineArgs, { x: '1', y: '2' }, { x: '2', y: '3' })).toBe(false);
	expect(collectArgs(isValidLineArgs, { x: '1', y: '2' })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: '1', y: '2' })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: '1', y: '2' }, { x: '1', y: '2' })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: '1', y: '2' }, { x: '1', y: '2' })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 'test', y: 2 }, { x: 2, y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 'test', y: 2 }, { x: 2, y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 'test', y: 2 }, { x: 'test', y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 'test', y: 2 }, { x: 'test', y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 'test', y: 'test' }, { x: 'test', y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 'test', y: 'test' }, { x: 'test', y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 'test', y: 'test' }, { x: 2, y: 'test' })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 'test', y: 'test' }, { x: 2, y: 'test' })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: 'test', y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: 'test', y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: 'test', y: 'test' })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: 'test', y: 'test' })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 'test', y: 2 }, { x: 'test', y: 'test' })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 'test', y: 2 }, { x: 'test', y: 'test' })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 'test' }, { x: 'test', y: 'test' })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 'test' }, { x: 'test', y: 'test' })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: [ 2 ], y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: [ 2 ], y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: 2, y: [ 3 ] })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: 2, y: [ 3 ] })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: [ 1 ], y: 2 }, { x: 2, y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: [ 1 ], y: 2 }, { x: 2, y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: [ 2 ] }, { x: 2, y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: [ 2 ] }, { x: 2, y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: [ 2 ], y: [ 3 ] })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: [ 2 ], y: [ 3 ] })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: [ 2 ] }, { x: [ 2 ], y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: [ 2 ] }, { x: [ 2 ], y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: [ 1 ], y: 2 }, { x: [ 2 ], y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: [ 1 ], y: 2 }, { x: [ 2 ], y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ]})).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: [ 1, 2 ] }, { x: [ 2, 3 ] })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: [ 1, 2 ] }, { x: [ 2, 3 ] })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: 1, y: null })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: 1, y: null })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: null, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: null, y: 2 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: null, y: null })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: null, y: null })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: null, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: null, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: null }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: null }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: null, y: null }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: null, y: null }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: null, y: null }, { x: null, y: null })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: null, y: null }, { x: null, y: null })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: 1, y: null })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: 1, y: undefined })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: undefined, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: undefined, y: 2 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: 2 }, { x: undefined, y: undefined })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: 2 }, { x: undefined, y: undefined })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: undefined, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: undefined, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: 1, y: undefined }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: 1, y: undefined }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: undefined, y: undefined }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: undefined, y: undefined }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidLineArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined })).toBe(false);
	expect(collectArgs(isNotValidLineArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined })).toBe(true);
	expect(collectArgs(isValidLineArgs, {}, {})).toBe(false);
	expect(collectArgs(isNotValidLineArgs, {}, {})).toBe(true);
  });

  test('Two arguments of type "[ number | string, number | string ]" (where string is able to be coerced as a number) should be valid as constructor arguments for class "Line" (isValidLineArgs should return true and isNotValidLineArgs should return false).', () => {
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ 2, 3 ])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ 2, 3 ])).toBe(false);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ '1', 2 ], [ 2, 3 ])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [ '1', 2 ], [ 2, 3 ])).toBe(false);
	expect(collectArgs(isValidLineArgs, [ '1', 2 ], [ '2', 3 ])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [ '1', 2 ], [ '2', 3 ])).toBe(false);
	expect(collectArgs(isValidLineArgs, [ '1', '2' ], [ 2, 3 ])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [ '1', '2' ], [ 2, 3 ])).toBe(false);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ '2', '3' ])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ '2', '3' ])).toBe(false);
	expect(collectArgs(isValidLineArgs, [ '1', '2' ], [ '2', 3 ])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [ '1', '2' ], [ '2', 3 ])).toBe(false);
	expect(collectArgs(isValidLineArgs, [ '1', 2 ], [ '2', '3' ])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [ '1', 2 ], [ '2', '3' ])).toBe(false);
	expect(collectArgs(isValidLineArgs, [ '1', '2' ], [ 2, '3' ])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [ '1', '2' ], [ 2, '3' ])).toBe(false);
	expect(collectArgs(isValidLineArgs, [ 1, '2' ], [ '2', '3' ])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [ 1, '2' ], [ '2', '3' ])).toBe(false);
	expect(collectArgs(isValidLineArgs, [ '1', '2' ], [ '2', '3' ])).toBe(true);
	expect(collectArgs(isNotValidLineArgs, [ '1', '2' ], [ '2', '3' ])).toBe(false);
	expect(collectArgs(isValidLineArgs, [ '1', '2' ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ '1', '2' ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ '1', '2' ], [ '1', '2' ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ '1', '2' ], [ '1', '2' ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 'test', 2 ], [ 2, 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 'test', 2 ], [ 2, 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 'test', 'test' ], [ 2, 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 'test', 'test' ], [ 2, 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 'test', 2 ], [ 'test', 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 'test', 2 ], [ 'test', 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 'test', 'test' ], [ 'test', 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 'test', 'test' ], [ 'test', 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 'test', 'test' ], [ 2, 'test' ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 'test', 'test' ], [ 2, 'test' ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ 'test', 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ 'test', 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ 'test', 'test' ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ 'test', 'test' ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 'test', 2 ], [ 'test', 'test' ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 'test', 2 ], [ 'test', 'test' ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 'test' ], [ 'test', 'test' ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 'test' ], [ 'test', 'test' ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 'test', 'test' ], [ 'test', 'test' ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 'test', 'test' ], [ 'test', 'test' ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [[ 2 ], 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [[ 2 ], 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ 2, [ 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ 2, [ 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1 ], 2 ], [ 2, 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1 ], 2 ], [ 2, 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, [ 2 ]], [ 2, 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, [ 2 ]], [ 2, 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1 ], [ 2 ]], [ 2, 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1 ], [ 2 ]], [ 2, 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [[ 2 ], [ 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [[ 2 ], [ 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, [ 2 ]], [[ 2 ], 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, [ 2 ]], [[ 2 ], 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1 ], 2 ], [[ 2 ], 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1 ], 2 ], [[ 2 ], 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1 ], [ 2 ]], [[ 2 ], 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1 ], [ 2 ]], [[ 2 ], 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [[ 1, 2 ]], [[ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [[ 1, 2 ]], [[ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ 1, null ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ 1, null ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ null, 2 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ null, 2 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ null, null ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ null, null ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ null, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ null, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, null ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, null ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ null, null ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ null, null ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ null, null ], [ null, null ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ null, null ], [ null, null ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ 1, null ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ 1, undefined ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ undefined, 2 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ undefined, 2 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, 2 ], [ undefined, undefined ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, 2 ], [ undefined, undefined ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ undefined, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ undefined, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1, undefined ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1, undefined ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ undefined, undefined ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ undefined, undefined ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ undefined, undefined ], [ undefined, undefined ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ undefined, undefined ], [ undefined, undefined ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [], [])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [], [])).toBe(true);
  });

 test('Four arguments of type "number | string" (where string values are able to be coerced to numbers) should be valid as constructor arguments for class "Line" (isValidLineArgs should return true and isNotValidLineArgs should return false).', () => {
	expect(collectArgs(isValidLineArgs, 1, 2, 2, 3)).toBe(true);
	expect(collectArgs(isNotValidLineArgs, 1, 2, 2, 3)).toBe(false);
	expect(collectArgs(isValidLineArgs, 1, 2)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, 1, 2)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, 1, 2)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, [ 2, 3 ], 3, 4)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, [ 2, 3 ], 3, 4)).toBe(true);
	expect(collectArgs(isValidLineArgs, '1', 2, 2, 3)).toBe(true);
	expect(collectArgs(isNotValidLineArgs, '1', 2, 2, 3)).toBe(false);
	expect(collectArgs(isValidLineArgs, '1', 2, '2', 3)).toBe(true);
	expect(collectArgs(isNotValidLineArgs, '1', 2, '2', 3)).toBe(false);
	expect(collectArgs(isValidLineArgs, '1', '2', 2, 3)).toBe(true);
	expect(collectArgs(isNotValidLineArgs, '1', '2', 2, 3)).toBe(false);
	expect(collectArgs(isValidLineArgs, 1, 2, '2', '3')).toBe(true);
	expect(collectArgs(isNotValidLineArgs, 1, 2, '2', '3')).toBe(false);
	expect(collectArgs(isValidLineArgs, '1', '2', '2', 3)).toBe(true);
	expect(collectArgs(isNotValidLineArgs, '1', '2', '2', 3)).toBe(false);
	expect(collectArgs(isValidLineArgs, '1', 2, '2', '3')).toBe(true);
	expect(collectArgs(isNotValidLineArgs, '1', 2, '2', '3')).toBe(false);
	expect(collectArgs(isValidLineArgs, '1', '2', 2, '3')).toBe(true);
	expect(collectArgs(isNotValidLineArgs, '1', '2', 2, '3')).toBe(false);
	expect(collectArgs(isValidLineArgs, 1, '2', '2', '3')).toBe(true);
	expect(collectArgs(isNotValidLineArgs, 1, '2', '2', '3')).toBe(false);
	expect(collectArgs(isValidLineArgs, '1', '2', '2', '3')).toBe(true);
	expect(collectArgs(isNotValidLineArgs, '1', '2', '2', '3')).toBe(false);
	expect(collectArgs(isValidLineArgs, '1', '2')).toBe(false);
	expect(collectArgs(isNotValidLineArgs, '1', '2')).toBe(true);
	expect(collectArgs(isValidLineArgs, '1', '2', '1', '2')).toBe(false);
	expect(collectArgs(isNotValidLineArgs, '1', '2', '1', '2')).toBe(true);
	expect(collectArgs(isValidLineArgs, '1', '2', '2', '3', '3', '4')).toBe(false);
	expect(collectArgs(isNotValidLineArgs, '1', '2', '2', '3', '3', '4')).toBe(true);
	expect(collectArgs(isValidLineArgs, 'test', 2, 2, 3)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 'test', 2, 2, 3)).toBe(true);
	expect(collectArgs(isValidLineArgs, 'test', 'test', 2, 3)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 'test', 'test', 2, 3)).toBe(true);
	expect(collectArgs(isValidLineArgs, 'test', 2, 'test', 3)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 'test', 2, 'test', 3)).toBe(true);
	expect(collectArgs(isValidLineArgs, 'test', 'test', 'test', 3)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 'test', 'test', 'test', 3)).toBe(true);
	expect(collectArgs(isValidLineArgs, 'test', 'test', 2, 'test')).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 'test', 'test', 2, 'test')).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, 'test', 3)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, 'test', 3)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, 'test', 'test')).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, 'test', 'test')).toBe(true);
	expect(collectArgs(isValidLineArgs, 'test', 2, 'test', 'test')).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 'test', 2, 'test', 'test')).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 'test', 'test', 'test')).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 'test', 'test', 'test')).toBe(true);
	expect(collectArgs(isValidLineArgs, 'test', 'test', 'test', 'test')).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 'test', 'test', 'test', 'test')).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, [ 2 ], 3)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, [ 2 ], 3)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, 2, [ 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, 2, [ 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1 ], 2, 2, 3)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1 ], 2, 2, 3)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, [ 2 ], 2, 3)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, [ 2 ], 2, 3)).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1 ], [ 2 ], 2, 3)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1 ], [ 2 ], 2, 3)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, [ 2 ], [ 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, [ 2 ], [ 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, [ 2 ], [ 2 ], 3)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, [ 2 ], [ 2 ], 3)).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1 ], 2, [ 2 ], 3)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1 ], 2, [ 2 ], 3)).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1 ], [ 2 ], [ 2 ], 3)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1 ], [ 2 ], [ 2 ], 3)).toBe(true);
	expect(collectArgs(isValidLineArgs, [ 1 ], [ 2 ], [ 2 ], [ 3 ])).toBe(false);
	expect(collectArgs(isNotValidLineArgs, [ 1 ], [ 2 ], [ 2 ], [ 3 ])).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, 1, null)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, 1, null)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, null, 2)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, null, 2)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, null, null)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, null, null)).toBe(true);
	expect(collectArgs(isValidLineArgs, null, 2, 1, 2)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, null, 2, 1, 2)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, null, 1, 2)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, null, 1, 2)).toBe(true);
	expect(collectArgs(isValidLineArgs, null, null, 1, 2)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, null, null, 1, 2)).toBe(true);
	expect(collectArgs(isValidLineArgs, null, null, null, null)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, null, null, null, null)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, 1, null)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, 1, undefined)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, undefined, 2)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, undefined, 2)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, 2, undefined, undefined)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, 2, undefined, undefined)).toBe(true);
	expect(collectArgs(isValidLineArgs, undefined, 2, 1, 2)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, undefined, 2, 1, 2)).toBe(true);
	expect(collectArgs(isValidLineArgs, 1, undefined, 1, 2)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, 1, undefined, 1, 2)).toBe(true);
	expect(collectArgs(isValidLineArgs, undefined, undefined, 1, 2)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, undefined, undefined, 1, 2)).toBe(true);
	expect(collectArgs(isValidLineArgs, undefined, undefined, undefined, undefined)).toBe(false);
	expect(collectArgs(isNotValidLineArgs, undefined, undefined, undefined, undefined)).toBe(true);
	expect(collectArgs(isValidLineArgs)).toBe(false);
	expect(collectArgs(isNotValidLineArgs)).toBe(true);
  });
});