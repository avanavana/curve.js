import { isValidCubicBezierArgs, isNotValidCubicBezierArgs, isValidCompositeCubicBezierArgs, isNotValidCompositeCubicBezierArgs } from '../validation.js';
import { collectArgs } from '../utils.js';

import { Point } from '../point.js';
import { CubicBezier } from '../bezier.js';


describe('Arguments of new CubicBezier() constructor:', () => {
  const p1 = new Point(1, 2),
	    p2 = new Point(2, 3),
	    p3 = new Point(3, 4),
	    p4 = new Point(4, 5);
	
  const c = new CubicBezier(p1, p2, p3, p4);

  test('A single argument of type "[ Point, Point, Point, Point ]" should be a valid as constructor arguments for class "CubicBezier" (isValidCubicBezierArgs should return true and isNotValidCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, p3, p4 ])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, p3, p4 ])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, p3, p4, p1 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, p3, p4, p1 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p1, p1, p1 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p1, p1, p1 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, p3 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [])).toBe(true);
  });

  test('A single argument of type "[ T, T, T, T ]" (where "T" is point-like, one of type "Point", "{ x: number | string, y: number | string }", or [ number | string, number | string ]" (where string values are able to be coerced to numbers) should be a valid as constructor arguments for class "CubicBezier" (isValidCubicBezierArgs should return true and isNotValidCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, p3, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, p3, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, p3, { x: 1, y: 2 }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, p3, { x: 1, y: 2 }, { x: 2, y: 3 } ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p1, p1, { x: 1, y: 2 } ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p1, p1, { x: 1, y: 2 } ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, p3, { x: '1', y: 2 }])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, p3, { x: '1', y: 2 }])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, p3, { x: '1', y: 2 }, { x: 2, y: 3 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, p3, { x: '1', y: 2 }, { x: 2, y: 3 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p1, p1, { x: '1', y: 2 } ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p1, p1, { x: '1', y: 2 } ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { x: '1', y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { x: '1', y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, p3, { a: 1, b: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, p3, { a: 1, b: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, p3, { a: 1, b: 2 }, { a: 2, b: 3 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, p3, { a: 1, b: 2 }, { a: 2, b: 3 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p1, p1, { a: 1, b: 2 } ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p1, p1, { a: 1, b: 2 } ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { a: 1, b: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { a: 1, b: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, p3, [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, p3, [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, p3, [ 1, 2 ], [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, p3, [ 1, 2 ], [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p1, p1, [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p1, p1, [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { x: 1, y: 2 }, [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { x: 1, y: 2 }, [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p1, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p1, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { x: '1', y: 2 }, [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { x: '1', y: 2 }, [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { x: '1', y: 2 }, [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { x: '1', y: 2 }, [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p1, { x: '1', y: 2 }, [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p1, { x: '1', y: 2 }, [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, { x: '1', y: 2 }, [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, { x: '1', y: 2 }, [ 2, 3 ]])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { x: 1, y: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { x: 1, y: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { x: 1, y: 2 }, [ '2', 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { x: 1, y: 2 }, [ '2', 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p1, { x: 1, y: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p1, { x: 1, y: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, { x: 1, y: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, { x: 1, y: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { x: '1', y: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { x: '1', y: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { x: '1', y: 2 }, [ '2', 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { x: '1', y: 2 }, [ '2', 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p1, { x: '1', y: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p1, { x: '1', y: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, { x: '1', y: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, { x: '1', y: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { a: 1, b: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { a: 1, b: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { a: 1, b: 2 }, [ '2', 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { a: 1, b: 2 }, [ '2', 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p1, { a: 1, b: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p1, { a: 1, b: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, { a: 1, b: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, { a: 1, b: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { a: '1', b: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { a: '1', b: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { a: '1', b: 2 }, [ '2', 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { a: '1', b: 2 }, [ '2', 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p1, { a: '1', b: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p1, { a: '1', b: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, { a: '1', b: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, { a: '1', b: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { x: 'test', y: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { x: 'test', y: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p2, { x: 'test', y: 2 }, [ '2', 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p2, { x: 'test', y: 2 }, [ '2', 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, p1, { x: 'test', y: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, p1, { x: 'test', y: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, { x: 'test', y: 2 }, [ '2', 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, { x: 'test', y: 2 }, [ '2', 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, null, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, null, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, null, { x: 1, y: 2 }, [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, null, { x: 1, y: 2 }, [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, null, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, null, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, undefined, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, undefined, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, undefined, { x: 1, y: 2 }, [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, undefined, { x: 1, y: 2 }, [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ p1, undefined, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ p1, undefined, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, { x: 1, y: 2 }, [ 2, 3 ]])).toBe(true);
  });

  test('A single argument of type "[{ x: number | string , y: number | string }, { x: number | string , y: number | string }, { x: number | string , y: number | string }, { x: number | string , y: number | string }]" should be valid as constructor arguments for class "CubicBezier" (isValidCubicBezierArgs should return true and isNotValidCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, b: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, b: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, b: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, b: 2 }])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 1, b: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 1, b: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { a: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { a: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { a: 1, b: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { a: 1, b: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ a: 1, b: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ a: 1, b: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: '2' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: '2' }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: '2' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: '2' }])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '1', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '1', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '1', y: '2' }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '1', y: '2' }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: 5 }])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: 5 }])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: '1', y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: '1', y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: '1', y: '2' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: '1', y: '2' }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: '1', y: '2' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: '1', y: '2' }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: 'test' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: 'test' }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: 'test' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: 'test' }])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 'test', y: 'test' }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 'test', y: 'test' }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: [ 2 ] }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: [ 2 ] }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: [ 2 ] }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: [ 2 ] }])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }, { x: [ 1 ], y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }, { x: [ 1 ], y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }, { x: [ 1 ], y: [ 2 ] }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }, { x: [ 1 ], y: [ 2 ] }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: [ 1 ], y: [ 2 ] }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: { x: 2, y: 2 }}])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: { x: 2, y: 2 }}])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: { x: 2, y: 2 }}])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: { x: 2, y: 2 }}])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}, { x: { x: 1, y: 1 }, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}, { x: { x: 1, y: 1 }, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: null }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: null }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: null }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: null }])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }, { x: null, y: null }, { x: null, y: null }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: null, y: null }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: null, y: null }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: undefined }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: undefined }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: 1, y: undefined }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: 1, y: undefined }])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: 3 }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: 3 }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 1, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 3, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 3, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 2 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 2 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 4 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 4 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 5 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 5 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{ x: undefined, y: undefined }])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{ x: undefined, y: undefined }])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [{}])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [{}])).toBe(true);
  });

  test('A single argument of type "[[ number | string, number | string ], [ number | string, number | string ], [ number | string, number | string ], [ number | string, number | string ]]" should be valid as constructor arguments for class "CubicBezier" (isValidCubicBezierArgs should return true and isNotValidCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, '2' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, '2' ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, '2' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, '2' ]])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '1', 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '1', 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '1', '2' ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '1', '2' ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '1', '2' ], [ '1', 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '1', '2' ], [ '1', 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '1', '2' ], [ '1', '2' ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '1', '2' ], [ '1', '2' ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', 5 ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', 5 ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '1', '2' ], [ '1', '2' ], [ '1', 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '1', '2' ], [ '1', '2' ], [ '1', 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ '1', 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ '1', 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ]])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ]])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ '1', '2' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ '1', '2' ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '1', '2' ], [ '1', '2' ], [ '1', '2' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '1', '2' ], [ '1', '2' ], [ '1', '2' ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ], [ '2', '3' ], [ '3', '4' ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ '1', '2' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ '1', '2' ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 'test' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 'test' ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 'test' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 'test' ]])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 'test', 'test' ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 'test', 'test' ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, [ 2 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, [ 2 ]]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, [ 2 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, [ 2 ]]])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 1 ], 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 1 ], 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]], [[ 1 ], 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]], [[ 1 ], 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]], [[ 1 ], [ 2 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]], [[ 1 ], [ 2 ]]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1 ], [ 2 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1 ], [ 2 ]]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, [ 2, 2 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, [ 2, 2 ]]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, [ 2, 2 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, [ 2, 2 ]]])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]], [[ 1, 1 ], 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]], [[ 1, 1 ], 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]], [[ 1, 1 ], [ 2, 2 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]], [[ 1, 1 ], [ 2, 2 ]]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[[ 1, 1 ], [ 2, 2 ]]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, null ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, null ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, null ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, null ]])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, null ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, null ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, null ], [ null, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, null ], [ null, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, null ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, null ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, null ], [ null, null ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, null ], [ null, null ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, null ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ], [ null, null ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ], [ null, null ], [ null, null ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ null, null ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ null, null ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, 2 ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, undefined ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, undefined ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ 2, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ 2, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, undefined ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, undefined ]])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, 2 ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, 3 ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, 3 ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ 1, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ 1, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ 3, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ 3, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, 2 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, 2 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ undefined, undefined ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ undefined, undefined ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[]])).toBe(true);
  });


  test('Four arguments of type "Point { x: number | string, y: number | string }" should be valid as constructor arguments for class "CubicBezier" (isValidCubicBezierArgs should return true and isNotValidCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCubicBezierArgs, p1, p2, p3, p4)).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, p1, p2, p3, p4)).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, p1, p2, p3, p4, p1)).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, p1, p2, p3, p4, p1)).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, p1, p1, p1, p1)).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, p1, p1, p1, p1)).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, p1, p2, p3)).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, p1, p2, p3)).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, p1)).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, p1)).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, p2)).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, p2)).toBe(true);
  });

  test('Four arguments of type "{ x: number | string, y: number | string }" should be valid as constructor arguments for class "CubicBezier" (isValidCubicBezierArgs should return true and isNotValidCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, b: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, b: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, b: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, b: 2 })).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 1, b: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 1, b: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { a: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { a: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { a: 1, b: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { a: 1, b: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 }, { a: 1, b: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { a: 1, b: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { a: 1, b: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: '2' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: '2' })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: '2' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: '2' })).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '1', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '1', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: 5 })).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: 5 })).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: '1', y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: '1', y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' })).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' })).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: '1', y: '2' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: '1', y: '2' })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' }, { x: '1', y: '2' })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: '1', y: '2' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: '1', y: '2' })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: 'test' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: 'test' })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: 'test' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: 'test' })).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' }, { x: 'test', y: 'test' }, { x: 'test', y: 'test' })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 'test', y: 'test' })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 'test', y: 'test' })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: [ 2 ] })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: [ 2 ] })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: [ 2 ] })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: [ 2 ] })).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }, { x: [ 1 ], y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }, { x: [ 1 ], y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }, { x: [ 1 ], y: [ 2 ] })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] }, { x: [ 4 ], y: [ 5 ] }, { x: [ 1 ], y: [ 2 ] })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] }, { x: [ 1 ], y: [ 2 ] })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] }, { x: [ 2 ], y: [ 3 ] }, { x: [ 3 ], y: [ 4 ] })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: [ 1 ], y: [ 2 ] })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: { x: 2, y: 2 }})).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: { x: 2, y: 2 }})).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: { x: 2, y: 2 }})).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: { x: 2, y: 2 }})).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}, { x: { x: 1, y: 1 }, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}, { x: { x: 1, y: 1 }, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }})).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }})).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }})).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }}, { x: { x: 4, y: 4 }, y: { x: 5, y: 5 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }})).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }})).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }})).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }})).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }}, { x: { x: 2, y: 2 }, y: { x: 3, y: 3 }}, { x: { x: 3, y: 3 }, y: { x: 4, y: 4 }})).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }})).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: { x: 1, y: 1 }, y: { x: 2, y: 2 }})).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: null })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: null })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: null })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: null })).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null }, { x: null, y: null })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null }, { x: null, y: null }, { x: null, y: null })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: null, y: null })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: null, y: null })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: undefined })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: undefined })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 1, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: 2, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: 1, y: undefined })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: 1, y: undefined })).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: 2 }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: 3 }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: 3 }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 1, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 3, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 3, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 2 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 2 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 4 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 4 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 5 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 5 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: 2 })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined }, { x: undefined, y: undefined }, { x: undefined, y: undefined })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, { x: undefined, y: undefined })).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, { x: undefined, y: undefined })).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, {})).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, {})).toBe(true);
  });

  test('Four arguments of type "[ number | string, number | string ]" should be valid as constructor arguments for class "CubicBezier" (isValidCubicBezierArgs should return true and isNotValidCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCubicBezierArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 1, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 1, '2' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, '2' ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 1, '2' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, '2' ])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '1', 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '1', 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '1', '2' ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '1', '2' ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '1', '2' ], [ '1', 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '1', '2' ], [ '1', 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '1', '2' ], [ '1', '2' ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '1', '2' ], [ '1', '2' ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', 5 ])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', 5 ])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '1', '2' ], [ '1', '2' ], [ '1', 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '1', '2' ], [ '1', '2' ], [ '1', 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ '1', 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ '1', 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ])).toBe(true);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ])).toBe(false);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ '1', '2' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ '1', '2' ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '1', '2' ], [ '1', '2' ], [ '1', '2' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '1', '2' ], [ '1', '2' ], [ '1', '2' ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ '1', '2' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ '1', '2' ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 1, 'test' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, 'test' ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 1, 'test' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, 'test' ])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ], [ 'test', 'test' ], [ 'test', 'test' ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 'test', 'test' ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 'test', 'test' ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, 1, [ 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, 1, [ 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, 1, [ 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, 1, [ 2 ])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 1 ], 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 1 ], 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]], [[ 1 ], 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]], [[ 1 ], 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]], [[ 1 ], [ 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]], [[ 4 ], [ 5 ]], [[ 1 ], [ 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]], [[ 1 ], [ 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1 ], [ 2 ]], [[ 2 ], [ 3 ]], [[ 3 ], [ 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 1 ], [ 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1 ], [ 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, 1, [ 2, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, 1, [ 2, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, 1, [ 2, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, 1, [ 2, 2 ])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]], [[ 1, 1 ], 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]], [[ 1, 1 ], 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]], [[ 1, 1 ], [ 2, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]], [[ 4, 4 ], [ 5, 5 ]], [[ 1, 1 ], [ 2, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]], [[ 1, 1 ], [ 2, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]], [[ 2, 2 ], [ 3, 3 ]], [[ 3, 3 ], [ 4, 4 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [[ 1, 1 ], [ 2, 2 ]])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 1, null ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, null ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 1, null ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, null ])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, null ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, null ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, null ], [ null, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, null ], [ null, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, null ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, null ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, null ], [ null, null ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, null ], [ null, null ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, null ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ], [ null, null ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ], [ null, null ], [ null, null ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ null, null ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ null, null ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, 2 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, 2 ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 1, undefined ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, undefined ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ 2, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ 2, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ 1, undefined ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ 1, undefined ])).toBe(true);  
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, 2 ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, 3 ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, 3 ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ 1, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ 1, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ 3, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ 3, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, 2 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, 2 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, 4 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, 4 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 5 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 5 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, 2 ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ], [ undefined, undefined ], [ undefined, undefined ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [ undefined, undefined ])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [ undefined, undefined ])).toBe(true);
	expect(collectArgs(isValidCubicBezierArgs, [])).toBe(false);
	expect(collectArgs(isNotValidCubicBezierArgs, [])).toBe(true);
  });

 test('A single argument of type "CubicBezier[]" (length > 1) should be valid as a constructor argument for class "CompositeCubicBezier" (isValidCompositeCubicBezierArgs should return true and isNotValidCompositeCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ c, c ])).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ c, c ])).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ c ])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ c ])).toBe(true);
  });

  test('A single argument of type "Point[]" (length % 4 === 0) should be valid as a constructor argument for class "CompositeCubicBezier" (isValidCompositeCubicBezierArgs should return true and isNotValidCompositeCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ p1, p2, p3, p4 ])).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ p1, p2, p3, p4 ])).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ p1, p2, p3, p4, p1 ])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ p1, p2, p3, p4, p1 ])).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ p1, p2, p3, p4, p1, p2, p3, p4 ])).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ p1, p2, p3, p4, p1, p2, p3, p4 ])).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ p1 ])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ p1 ])).toBe(true);
  });

  test('A single argument of type "{ x: number | string, y: number | string }[]" (length % 4 === 0, where string values are able to be coerced to numbers) should be valid as a constructor argument for class "CompositeCubicBezier" (isValidCompositeCubicBezierArgs should return true and isNotValidCompositeCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCompositeCubicBezierArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }])).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [{ x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }])).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [{ x: 1, y: 2 }])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [{ x: 1, y: 2 }])).toBe(true);
  });

  test('A single argument of type "[ number | string, number | string ]" (length % 4 === 0, where string values are able to be coerced to numbers) should be valid as a constructor argument for class "CompositeCubicBezier" (isValidCompositeCubicBezierArgs should return true and isNotValidCompositeCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCompositeCubicBezierArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ]])).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [[ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ]])).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [[ 1, 2 ]])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [[ 1, 2 ]])).toBe(true);
  });

  test('Multiple (> 1) arguments of type "CubicBezier" should be valid as constructor arguments for class "CompositeCubicBezier" (isValidCompositeCubicBezierArgs should return true and isNotValidCompositeCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCompositeCubicBezierArgs, c, c)).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, c, c)).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, c)).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, c)).toBe(true);
  });

  test('Multiple (> 1) arguments of type "Point" (mod 4) should be valid as constructor arguments for class "CompositeCubicBezier" (isValidCompositeCubicBezierArgs should return true and isNotValidCompositeCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCompositeCubicBezierArgs, p1, p2, p3, p4)).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, p1, p2, p3, p4)).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, p1, p2, p3, p4, p1)).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, p1, p2, p3, p4, p1)).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, p1, p2, p3, p4, p1, p2, p3, p4)).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, p1, p2, p3, p4, p1, p2, p3, p4)).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, p1)).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, p1)).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs)).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs)).toBe(true);
  });

  test('Multiple (> 1) arguments of type "{ x: number | string, y: number | string }" (mod 4, where string values are able to be coerced to numbers) should be valid as constructor arguments for class "Spline" (isValidCompositeCubicBezierArgs should return true and isNotValidCompositeCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 }, { x: 1, y: 2 }, { x: 2, y: 3 }, { x: 3, y: 4 }, { x: 4, y: 5 })).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: 1, y: 2 })).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: 1, y: 2 })).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 })).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 })).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 })).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 }, { a: 1, b: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 })).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: 1, y: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 })).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: 1, y: 2 }, { a: 2, b: 3 }, { a: 3, b: 4 }, { a: 4, b: 5 })).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { a: 1, b: 2 })).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { a: 1, b: 2 })).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' })).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' })).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' })).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' })).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: '1', y: '2' })).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: '1', y: '2' }, { x: '2', y: '3' }, { x: '3', y: '4' }, { x: '4', y: '5' }, { x: '1', y: '2' })).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: '1', y: '2' })).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: '1', y: '2' })).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: 'a', y: 'b' }, { x: 'b', y: 'c' }, { x: 'c', y: 'd' }, { x: 'd', y: 'e' })).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: 'a', y: 'b' }, { x: 'b', y: 'c' }, { x: 'c', y: 'd' }, { x: 'd', y: 'e' })).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: 'a', y: 'b' }, { x: 'b', y: 'c' }, { x: 'c', y: 'd' }, { x: 'd', y: 'e' }, { x: 'a', y: 'b' })).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: 'a', y: 'b' }, { x: 'b', y: 'c' }, { x: 'c', y: 'd' }, { x: 'd', y: 'e' }, { x: 'a', y: 'b' })).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: 'a', y: 'b' }, { x: 'b', y: 'c' }, { x: 'c', y: 'd' }, { x: 'd', y: 'e' }, { x: 'a', y: 'b' }, { x: 'b', y: 'c' }, { x: 'c', y: 'd' }, { x: 'd', y: 'e' })).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: 'a', y: 'b' }, { x: 'b', y: 'c' }, { x: 'c', y: 'd' }, { x: 'd', y: 'e' }, { x: 'a', y: 'b' }, { x: 'b', y: 'c' }, { x: 'c', y: 'd' }, { x: 'd', y: 'e' })).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, { x: 'a', y: 'b' })).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, { x: 'a', y: 'b' })).toBe(true);
  });

  test('Multiple (> 1) arguments of type "[ number | string, number | string ]" (mod 4, where string values are able to be coerced to numbers) should be valid as constructor arguments for class "CompositeCubicBezier" (isValidCompositeCubicBezierArgs should return true and isNotValidCompositeCubicBezierArgs should return false).', () => {
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ])).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ 1, 2 ])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ 1, 2 ])).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ])).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ])).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ '1', '2' ])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ '1', '2' ])).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ])).toBe(true);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ], [ '1', '2' ], [ '2', '3' ], [ '3', '4' ], [ '4', '5' ])).toBe(false);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ '1', '2' ])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ '1', '2' ])).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ 'a', 'b' ], [ 'b', 'c' ], [ 'c', 'd' ], [ 'd', 'e' ])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ 'a', 'b' ], [ 'b', 'c' ], [ 'c', 'd' ], [ 'd', 'e' ])).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ 'a', 'b' ], [ 'b', 'c' ], [ 'c', 'd' ], [ 'd', 'e' ], [ 'a', 'b' ])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ 'a', 'b' ], [ 'b', 'c' ], [ 'c', 'd' ], [ 'd', 'e' ], [ 'a', 'b' ])).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ 'a', 'b' ], [ 'b', 'c' ], [ 'c', 'd' ], [ 'd', 'e' ], [ 'a', 'b' ], [ 'b', 'c' ], [ 'c', 'd' ], [ 'd', 'e' ])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ 'a', 'b' ], [ 'b', 'c' ], [ 'c', 'd' ], [ 'd', 'e' ], [ 'a', 'b' ], [ 'b', 'c' ], [ 'c', 'd' ], [ 'd', 'e' ])).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [ 'a', 'b' ])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [ 'a', 'b' ])).toBe(true);
  });

  test('Arguments of "[]" (empty array), "{}" (empty object), and no arguments should be invalid as constructor arguments for class "CompositeCubicBezier" (isValidCompositeCubicBezierArgs should return false and isNotValidCompositeCubicBezierArgs should return true).', () => {
	expect(collectArgs(isValidCompositeCubicBezierArgs, {})).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, {})).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs, [])).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs, [])).toBe(true);
	expect(collectArgs(isValidCompositeCubicBezierArgs)).toBe(false);
	expect(collectArgs(isNotValidCompositeCubicBezierArgs)).toBe(true);
  });
});